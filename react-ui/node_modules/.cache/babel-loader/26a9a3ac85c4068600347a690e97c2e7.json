{"ast":null,"code":"import 'whatwg-fetch';\nimport constants from './../consts';\nvar RESTAPI = constants.RESTAPIURL;\nexport default {\n  // gets posts of a category and return is callback\n  getPostsByCategoryName: function getPostsByCategoryName(categoryName, callback) {\n    window.fetch(RESTAPI + '/api/acts/v1/categories/' + categoryName + '/acts').then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      // console.log('getPostsByCategoryNameAPI', json);\n      return callback(json);\n    });\n  },\n  // username and password in an object and return is callback\n  login: function login(unameAndPassword, callback) {\n    window.fetch(RESTAPI + '/api/account/signin', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(unameAndPassword)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      console.log(json);\n      return callback(json);\n    });\n  },\n  upload: function upload(data, callback) {\n    window.fetch(RESTAPI + '/api/v1/acts', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      console.log(json);\n      return callback(json);\n    });\n  },\n  signup: function signup(unameAndPassword, callback) {\n    window.fetch(RESTAPI + '/api/v1/users', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(unameAndPassword)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      console.log(json);\n      return callback(json);\n    });\n  },\n  getAllPosts: function getAllPosts(callback) {\n    window.fetch(RESTAPI + '/api/v1/acts').then(function (resp) {\n      if (resp.status === 200) {\n        return resp.json();\n      } else {\n        return [];\n      }\n    }).then(function (json) {\n      console.log('getAllPostsResponse', json);\n      return callback(json);\n    });\n  },\n  getAllCats: function getAllCats(callback) {\n    window.fetch(RESTAPI + '/api/v1/categories').then(function (resp) {\n      if (resp.status === 200) {\n        return resp.json();\n      } else if (resp.status === 204) {\n        return [];\n      } else {\n        return [];\n      }\n    }).then(function (json) {\n      return callback(json);\n    });\n  },\n  deletePost: function deletePost(actId, callback) {\n    window.fetch(RESTAPI + '/api/v1/acts/' + actId, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      if (response.status === 400) {\n        return callback(false);\n      } else {\n        return callback(true);\n      }\n    }).then(function (json) {\n      console.log(json);\n      return callback(json);\n    });\n  },\n  upvoteAct: function upvoteAct(actId, callback) {\n    window.fetch(RESTAPI + '/api/v1/acts/upvote', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify([actId])\n    });\n  },\n  uploadPost: function uploadPost(post, callback) {\n    window.fetch(RESTAPI + '/api/v1/acts', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    }).then(function (response) {\n      if (response.status === 200) {\n        return callback(true);\n      }\n\n      return callback(false);\n    });\n  }\n};","map":{"version":3,"sources":["/Users/sanky/slacts/src/dataservice/posts-service.js"],"names":["constants","RESTAPI","RESTAPIURL","getPostsByCategoryName","categoryName","callback","window","fetch","then","response","json","login","unameAndPassword","method","headers","body","JSON","stringify","console","log","upload","data","signup","getAllPosts","resp","status","getAllCats","deletePost","actId","upvoteAct","uploadPost","post"],"mappings":"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","sourcesContent":["import 'whatwg-fetch';\n\nimport constants from './../consts';\n\nconst RESTAPI = constants.RESTAPIURL;\n\nexport default {\n    // gets posts of a category and return is callback\n    getPostsByCategoryName(categoryName, callback) {\n        window.fetch(RESTAPI + '/api/acts/v1/categories/' + categoryName + '/acts')\n            .then(response => response.json())\n            .then(json => {\n                // console.log('getPostsByCategoryNameAPI', json);\n                return callback(json);\n            });\n    },\n\n    // username and password in an object and return is callback\n    login(unameAndPassword, callback) {\n        window.fetch(RESTAPI + '/api/account/signin', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(unameAndPassword),\n        })\n            .then(response => response.json())\n            .then(json => {\n                console.log(json);\n                return callback(json);\n            });\n    },\n\n    upload(data, callback) {\n        window.fetch(RESTAPI + '/api/v1/acts',{\n          method:'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(data),\n        })\n            .then(response => response.json())\n            .then(json => {\n                console.log(json);\n                return callback(json);\n            });\n    },\n\n    signup(unameAndPassword, callback) {\n        window.fetch(RESTAPI + '/api/v1/users', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(unameAndPassword),\n        })\n            .then(response => response.json())\n            .then(json => {\n                console.log(json);\n                return callback(json);\n            });\n    },\n\n    getAllPosts(callback) {\n        window.fetch(RESTAPI + '/api/v1/acts')\n            .then(resp => {\n                if (resp.status === 200) {\n                    return resp.json();\n                } else {\n                    return [];\n                }\n            })\n            .then(json => {\n                console.log('getAllPostsResponse', json);\n                return callback(json);\n            });\n    },\n\n    getAllCats(callback) {\n        window.fetch(RESTAPI + '/api/v1/categories')\n            .then((resp => {\n                if (resp.status === 200) {\n                    return resp.json();\n                } else if (resp.status === 204) {\n                    return [];\n                } else {\n                    return [];\n                }\n            }))\n            .then(json => callback(json));\n    },\n\n    deletePost(actId, callback) {\n        window.fetch(RESTAPI + '/api/v1/acts/' + actId, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n        })\n            .then(response => {\n                if (response.status === 400) {\n                    return callback(false);\n                }\n                else {\n                    return callback(true);\n                }\n            })\n            .then(json => {\n                console.log(json);\n                return callback(json);\n            });\n    },\n\n    upvoteAct(actId, callback) {\n        window.fetch(RESTAPI + '/api/v1/acts/upvote', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify([ actId ]),\n        });   \n    },\n\n    uploadPost(post, callback) {\n        window.fetch(RESTAPI + '/api/v1/acts',{\n          method:'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(post),\n        })\n        .then(response => {\n            if (response.status === 200) {\n                return callback(true);\n            }                \n            return callback(false);\n        });\n    },\n};\n"]},"metadata":{},"sourceType":"module"}